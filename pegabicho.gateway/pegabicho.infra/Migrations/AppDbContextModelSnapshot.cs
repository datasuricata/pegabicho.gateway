// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pegabicho.infra.ORM;

namespace pegabicho.infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Core")
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Logs.LogApp", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("Event");

                    b.Property<string>("Ip");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Message");

                    b.Property<int>("Service");

                    b.Property<string>("Ticket");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("LogApp");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Logs.LogCore", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("Ip");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Payload");

                    b.Property<int>("Service");

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("LogCore");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Logs.LogKernel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<bool>("Fixed");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Payload");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("LogKernel");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Orders.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClientId");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<DateTimeOffset?>("DateDue");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ProviderId");

                    b.Property<string>("Token");

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ProviderId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Pets.Pet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("Code");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("ImageThumbsUri");

                    b.Property<string>("ImageUri");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("RaceId");

                    b.Property<int>("Size");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.Property<float>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.HasIndex("UserId");

                    b.ToTable("Pet");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Pets.Race", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Specie");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Surveys.ImageSurvey", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("FullName");

                    b.Property<string>("ImageThumbsUri");

                    b.Property<string>("ImageUri");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SurveyId");

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("ImageSurvey");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Surveys.Survey", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<DateTimeOffset>("DateDue");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("TravelId");

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("TravelId");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Travels.Travel", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<double>("FromLatitude");

                    b.Property<double>("FromLongitude");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("OrderId");

                    b.Property<DateTimeOffset?>("Scheduled");

                    b.Property<double>("ToLatitude");

                    b.Property<double>("ToLongitude");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Travel");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.Access", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Stage");

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Access");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine");

                    b.Property<int>("Building");

                    b.Property<string>("City");

                    b.Property<int>("Complement");

                    b.Property<string>("Country");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("District");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Number");

                    b.Property<string>("PostalCode");

                    b.Property<string>("StateProvince");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.Document", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("ImageUri");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.General", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Activity");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("CellPhone");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("FirstName");

                    b.Property<string>("InscEstadual");

                    b.Property<string>("InscMunicipal");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("Phone");

                    b.Property<string>("Representation");

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("General");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.Role", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Level");

                    b.Property<int>("Module");

                    b.Property<string>("ProfileId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.Siege", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressId");

                    b.Property<double>("Altitude");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<double>("Range");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Siege");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Password");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account");

                    b.Property<string>("Agency");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<int>("DateDue");

                    b.Property<string>("Document");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Orders.Order", b =>
                {
                    b.HasOne("pegabicho.domain.Entities.Core.Users.User", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("pegabicho.domain.Entities.Core.Users.User", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Pets.Pet", b =>
                {
                    b.HasOne("pegabicho.domain.Entities.Core.Pets.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId");

                    b.HasOne("pegabicho.domain.Entities.Core.Users.User", "User")
                        .WithMany("Pets")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Surveys.ImageSurvey", b =>
                {
                    b.HasOne("pegabicho.domain.Entities.Core.Surveys.Survey", "Survey")
                        .WithMany("Images")
                        .HasForeignKey("SurveyId");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Surveys.Survey", b =>
                {
                    b.HasOne("pegabicho.domain.Entities.Core.Travels.Travel", "Travel")
                        .WithMany("Surveys")
                        .HasForeignKey("TravelId");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Travels.Travel", b =>
                {
                    b.HasOne("pegabicho.domain.Entities.Core.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.Access", b =>
                {
                    b.HasOne("pegabicho.domain.Entities.Core.Users.User", "User")
                        .WithMany("Profiles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.Address", b =>
                {
                    b.HasOne("pegabicho.domain.Entities.Core.Users.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("pegabicho.domain.Entities.Core.Users.Address", "UserId");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.Document", b =>
                {
                    b.HasOne("pegabicho.domain.Entities.Core.Users.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.General", b =>
                {
                    b.HasOne("pegabicho.domain.Entities.Core.Users.User", "User")
                        .WithOne("General")
                        .HasForeignKey("pegabicho.domain.Entities.Core.Users.General", "UserId");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.Role", b =>
                {
                    b.HasOne("pegabicho.domain.Entities.Core.Users.Access", "Profile")
                        .WithMany("Roles")
                        .HasForeignKey("ProfileId");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.Siege", b =>
                {
                    b.HasOne("pegabicho.domain.Entities.Core.Users.Address", "Address")
                        .WithMany("Sieges")
                        .HasForeignKey("AddressId");
                });

            modelBuilder.Entity("pegabicho.domain.Entities.Core.Users.Wallet", b =>
                {
                    b.HasOne("pegabicho.domain.Entities.Core.Users.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
